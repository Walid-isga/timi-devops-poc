apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-data
  namespace: timi
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: timi
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels: { app: postgres }
  template:
    metadata:
      labels: { app: postgres }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: pg-secret
          volumeMounts:
            - name: pg-storage
              mountPath: /var/lib/postgresql/data
            - name: pg-init
              mountPath: /docker-entrypoint-initdb.d
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 15
            periodSeconds: 10
      volumes:
        - name: pg-storage
          persistentVolumeClaim:
            claimName: pg-data
        - name: pg-init
          configMap:
            name: pg-init-sql
            # s'assurer que c'est bien des .sql
            items:
              - key: 001_init.sql
                path: 001_init.sql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: timi
spec:
  selector: { app: postgres }
  ports:
    - name: pg
      port: 5432
      targetPort: 5432
