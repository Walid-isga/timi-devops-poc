name: CI

# üîî D√©clenche √† chaque push/PR sur main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# ‚öôÔ∏è Donne le droit d'√©crire dans GHCR
permissions:
  contents: read
  packages: write

# üåç Variables communes
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # -> ghcr.io/<owner>/<repo>

jobs:
  test-build-push:
    runs-on: ubuntu-latest

    steps:
      # 1) R√©cup√®re le code du repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Setup Node.js pour ex√©cuter les tests
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3) Installe toutes les deps (prod + dev pour Jest)
      - name: Install dependencies
        run: npm ci

      # 4) Lance les tests (Jest lit "test" dans package.json)
      - name: Run unit tests
        run: npm test

      # 5) Se connecter au registre GHCR avec le GITHUB_TOKEN
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6) Pr√©pare les tags/labels (latest + sha du commit)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      # 7) Build l'image Docker et push vers GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
